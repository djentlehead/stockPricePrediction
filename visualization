import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from alpha_vantage.timeseries import TimeSeries

def load_data(file_path):
  return pd.read_csv(file_path)

def preprocess_data(data):
    if 'Date' not in data.columns:
        print("Columns in the loaded dataset:", data.columns)
        raise ValueError("Column 'Date' not found in the dataset.")
    data['Date'] = pd.to_datetime(data['Date'], format='%d-%m-%Y')
    data.sort_values('Date', inplace=True)
    return data


def engineer_features(data):
    X = data[['Open', 'High', 'Low', 'Volume']].values
    y = data['Close'].values
    return X, y

def split_data(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    return X_train, X_test, y_train, y_test

def train_model(X_train, y_train):
    model = LinearRegression()
    model.fit(X_train, y_train)
    return model

def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    return mse


def visualize_results(X, y, model=None):
    plt.figure(figsize=(12, 6))

    if isinstance(X, pd.DataFrame):
        X = X.values

    if X.shape[1] > 1:
        plt.scatter(X[:, 0], y, color='blue', label='Actual Close Price')
    else:
        plt.scatter(range(len(X)), y, color='blue', label='Actual Close Price')

    if model:
        y_pred = model.predict(X)
        if X.shape[1] > 1:
            plt.plot(X[:, 0], y_pred, color='red', label='Predicted Close Price')
        else:
            plt.plot(range(len(X)), y_pred, color='red', label='Predicted Close Price')

    plt.title('Stock Price Prediction')
    plt.xlabel('Open Price' if X.shape[1] > 1 else 'Feature')
    plt.ylabel('Close Price')
    plt.legend()
    plt.show()


def fetch_stock_data(symbol, api_key):
    ts = TimeSeries(key=api_key, output_format='pandas')
    data, _ = ts.get_daily(symbol=symbol, outputsize='full')
    return data

def predict_stock_price(symbol, api_key, model):
    stock_data = fetch_stock_data(symbol, api_key)
    stock_data = preprocess_data(stock_data)
    X_pred = stock_data[['Open']].values
    predicted_close_prices = model.predict(X_pred)
    return X_pred[:, 0], predicted_close_prices

def main():
    data = load_data('stock_data.csv')
    data = preprocess_data(data)
    X, y = engineer_features(data)
    X_train, X_test, y_train, y_test = split_data(X, y)
    model = train_model(X_train, y_train)
    mse = evaluate_model(model, X_test, y_test)
    print("Mean Squared Error:", mse)
    visualize_results(X_test, y_test, model)
    symbol = input("Enter stock symbol: ")
    api_key = 'your_API_key'
    X_pred, predicted_close_prices = predict_stock_price(symbol, api_key, model)
    visualize_results(X_pred, predicted_close_prices)


if __name__ == "__main__":
    main()
